---
openapi: 3.0.2
info:
  title: SportsSocialMediaNetwork API
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: |
      Localhost
paths:
  /events/{eventId}:
    summary: Path used to manage a single Event.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `Event`.  This path contains `GET`, `PUT`, and `DELETE` operations used\
      \ to perform the get, update, and delete tasks, respectively."
    get:
      tags:
        - Event
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestEvent'
          description: Successful response - returns a single `RestEvent`.
        "404":
          description: Event not found
      operationId: getEvent
      summary: Get a Event
      description: Gets the details of a single instance of a `RestEvent`.
    put:
      requestBody:
        description: Updated `Event` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      tags:
        - Event
      responses:
        "202":
          description: Successful response.
        "404":
          description: Event not found
      operationId: updateEvent
      summary: Update a Event
      description: Updates an existing `Event`.
    delete:
      tags:
        - Event
      responses:
        "204":
          description: Successful response.
        "404":
          description: Event not found
      operationId: deleteEvent
      summary: Delete a Event
      description: Deletes an existing `Event`.
    parameters:
      - name: eventId
        description: A unique identifier for a `Event`.
        schema:
          type: string
        in: path
        required: true
  /events:
    summary: Path used to manage the list of events.
    description: "The REST endpoint/path used to list and create zero or more `Event`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      tags:
        - Event
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestEvent'
          description: Successful response - returns an array of `RestEvent` entities.
        "404":
          description: Event not found
      operationId: getEvents
      summary: List All Events
      description: Gets a list of all `RestEvent` entities.
    post:
      requestBody:
        description: A new `Event` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      tags:
        - Event
      responses:
        "201":
          description: Successful response.
        "404":
          description: Event not found.
      operationId: createEvent
      summary: Create a Event
      description: Creates a new instance of a `Event`.
  /users:
    summary: Path used to manage the list of users.
    description: "The REST endpoint/path used to list and create zero or more `User`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      tags:
        - User
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: Successful response - returns an array of `User` entities.
        "404":
          description: User not found.
      operationId: getUsers
      summary: List All Users
      description: Gets a list of all `User` entities.
    post:
      requestBody:
        description: A new `User` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
        - User
      responses:
        "201":
          description: Successful response.
        "404":
          description: User not found.
      operationId: createUser
      summary: Create a User
      description: Creates a new instance of a `User`.
  /users/{userId}:
    summary: Path used to manage a single User.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `User`.  This path contains `GET`, `PUT`, and `DELETE` operations used\
      \ to perform the get, update, and delete tasks, respectively."
    get:
      tags:
        - User
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful response - returns a single `User`.
        "404":
          description: User not found.
      operationId: getUser
      summary: Get a User
      description: Gets the details of a single instance of a `User`.
    put:
      requestBody:
        description: Updated `User` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
        - User
      responses:
        "202":
          description: Successful response.
        "404":
          description: User not found.
      operationId: updateUser
      summary: Update a User
      description: Updates an existing `User`.
    delete:
      tags:
        - User
      responses:
        "204":
          description: Successful response.
        "404":
          description: User not found.
      operationId: deleteUser
      summary: Delete a User
      description: Deletes an existing `User`.
    parameters:
      - name: userId
        description: A unique identifier for a `User`.
        schema:
          type: string
        in: path
        required: true
  /userposts:
    summary: Path used to manage the list of userposts.
    description: "The REST endpoint/path used to list and create zero or more `UserPost`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      tags:
        - UserPost
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestUserPost'
          description: Successful response - returns an array of `UserPost` entities.
        "404":
          description: User post not found.
      operationId: getUserPosts
      summary: List All UserPosts
      description: Gets a list of all `RestUserPost` entities.
    post:
      requestBody:
        description: A new `UserPost` to be created.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserPost'
        required: true
      tags:
        - UserPost
      responses:
        "201":
          description: Successful response.
        "404":
          description: User post not found.
      operationId: createUserPost
      summary: Create a UserPost
      description: Creates a new instance of a `UserPost`.
  /userposts/{userpostId}:
    summary: Path used to manage a single UserPost.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `UserPost`.  This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      tags:
        - UserPost
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestUserPost'
          description: Successful response - returns a single `UserPost`.
        "404":
          description: User post not found.
      operationId: getUserPost
      summary: Get a UserPost
      description: Gets the details of a single instance of a `UserPost`.
    put:
      requestBody:
        description: Updated `UserPost` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
        required: true
      tags:
        - UserPost
      responses:
        "202":
          description: Successful response.
        "404":
          description: User post not found.
      operationId: updateUserPost
      summary: Update a UserPost
      description: Updates an existing `UserPost`.
    delete:
      tags:
        - UserPost
      responses:
        "204":
          description: Successful response.
        "404":
          description: User post not found.
      operationId: deleteUserPost
      summary: Delete a UserPost
      description: Deletes an existing `UserPost`.
    parameters:
      - name: userpostId
        description: A unique identifier for a `UserPost`.
        schema:
          type: string
        in: path
        required: true
  /trainingplans/{trainingplanId}:
    summary: Path used to manage a single TrainingPlan.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `TrainingPlan`.  This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      tags:
        - TrainingPlan
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainingPlan'
          description: Successful response - returns a single `TrainingPlan`.
        "404":
          description: Training plan not found.
      operationId: getTrainingPlan
      summary: Get a TrainingPlan
      description: Gets the details of a single instance of a `TrainingPlan`.
    put:
      requestBody:
        description: Updated `TrainingPlan` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingPlan'
        required: true
      tags:
        - TrainingPlan
      responses:
        "202":
          description: Successful response.
        "404":
          description: Training plan not found.
      operationId: updateTrainingPlan
      summary: Update a TrainingPlan
      description: Updates an existing `TrainingPlan`.
    delete:
      tags:
        - TrainingPlan
      responses:
        "204":
          description: Successful response.
        "404":
          description: Training plan not found.
      operationId: deleteTrainingPlan
      summary: Delete a TrainingPlan
      description: Deletes an existing `TrainingPlan`.
    parameters:
      - name: trainingplanId
        description: A unique identifier for a `TrainingPlan`.
        schema:
          type: string
        in: path
        required: true
  /trainingplans:
    summary: Path used to manage the list of trainingplans.
    description: "The REST endpoint/path used to list and create zero or more `TrainingPlan`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      tags:
        - TrainingPlan
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrainingPlan'
          description: Successful response - returns an array of `TrainingPlan` entities.
        "404":
          description: Training plan not found.
      operationId: getTrainingPlans
      summary: List All TrainingPlans
      description: Gets a list of all `TrainingPlan` entities.
    post:
      requestBody:
        description: A new `TrainingPlan` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainingPlan'
        required: true
      tags:
        - TrainingPlan
      responses:
        "201":
          description: Successful response.
        "404":
          description: Training plan not found.
      operationId: createTrainingPlan
      summary: Create a TrainingPlan
      description: Creates a new instance of a `TrainingPlan`.
  /postcomments:
    summary: Path used to manage the list of postcomments.
    description: "The REST endpoint/path used to list and create zero or more `PostComment`\
        \ entities.  This path contains a `GET` and `POST` operation to perform the\
        \ list and create tasks, respectively."
    get:
      tags:
      - PostComment
      parameters:
      - name: postId
        description: ""
        schema:
          type: integer
        in: query
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestPostComment'
          description: Successful response - returns an array of `RestPostComment` entities.
      operationId: getPostComments
      summary: List All PostComments
      description: Gets a list of all `RestPostComment` entities.
    post:
      tags:
        - PostComment
      requestBody:
        description: A new `PostComment` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostComment'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createPostComment
      summary: Create a PostComment
      description: Creates a new instance of a `PostComment`.
  /postcomments/{postcommentId}:
    summary: Path used to manage a single PostComment.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `PostComment`.  This path contains `GET`, `PUT`, and `DELETE` operations\
      \ used to perform the get, update, and delete tasks, respectively."
    get:
      tags:
        - PostComment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestPostComment'
          description: Successful response - returns a single `PostComment`.
      operationId: getPostComment
      summary: Get a PostComment
      description: Gets the details of a single instance of a `PostComment`.
    put:
      tags:
        - PostComment
      requestBody:
        description: Updated `PostComment` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostComment'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updatePostComment
      summary: Update a PostComment
      description: Updates an existing `PostComment`.
    delete:
      responses:
        "204":
          description: Successful response.
      operationId: deletePostComment
      summary: Delete a PostComment
      description: Deletes an existing `PostComment`.
    parameters:
      - name: postcommentId
        description: A unique identifier for a `PostComment`.
        schema:
          type: string
        in: path
        required: true
  /likes:
    summary: Path used to manage the list of likes.
    description: "The REST endpoint/path used to list and create zero or more `like`\
      \ entities.  This path contains a `GET` and `POST` operation to perform the\
      \ list and create tasks, respectively."
    get:
      tags:
        - Like
      parameters:
        - name: postId
          description: ""
          schema:
            type: integer
          in: query
          required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RestLike'
          description: Successful response - returns an array of `Like` entities.
      operationId: getLikes
      summary: List All likes
      description: Gets a list of all `Like` entities.
    post:
      tags:
        - Like
      requestBody:
        description: A new `Like` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
        required: true
      responses:
        "201":
          description: Successful response.
      operationId: createLike
      summary: Create a Like
      description: Creates a new instance of a `Like`.
  /likes/{likeId}:
    summary: Path used to manage a single Like.
    description: "The REST endpoint/path used to get, update, and delete single instances\
      \ of an `Like`.  This path contains `GET`, `PUT`, and `DELETE` operations used\
      \ to perform the get, update, and delete tasks, respectively."
    get:
      tags:
        - Like
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Like'
          description: Successful response - returns a single `Like`.
      operationId: getLike
      summary: Get a Like
      description: Gets the details of a single instance of a `Like`.
    put:
      tags:
        - Like
      requestBody:
        description: Updated `Like` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
        required: true
      responses:
        "202":
          description: Successful response.
      operationId: updateLike
      summary: Update a Like
      description: Updates an existing `Like`.
    delete:
      tags:
        - Like
      responses:
        "204":
          description: Successful response.
      operationId: deleteLike
      summary: Delete a Like
      description: Deletes an existing `Like`.
    parameters:
      - name: likeId
        description: A unique identifier for a `Like`.
        schema:
          type: string
        in: path
        required: true
components:
  schemas:
    Event:
      title: Root Type for Event
      description: ""
      required:
        - name
        - sportType
        - eventDateTime
      type: object
      properties:
        name:
          type: string
        sportType:
          type: string
        latitude:
          format: double
          description: ""
          type: number
        longitude:
          format: double
          description: ""
          type: number
        duration:
          type: integer
        eventDateTime:
          format: date-time
          type: string
        details:
          type: string
    User:
      title: Root Type for User
      description: ""
      required:
        - email
        - firstName
        - id
        - lastName
        - registeredAt
        - password
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        phoneNumber:
          type: string
        password:
          type: string
        registeredAt:
          format: date-time
          type: string
        email:
          type: string
        userImage:
          description: ""
          type: string
      example:
        id: 1
        firstName: First name
        lastName: Last name
        phoneNumber: "0123456789"
        password: pass1234
        registeredAt: 2020-07-21T12:12:23.000+0200
        email: email@example.com
        userImage: iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAA
    UserPost:
      title: Root Type for UserPost
      description: ""
      required:
        - image
      type: object
      properties:
        caption:
          type: string
        image:
          type: string
          format: binary
      example:
    TrainingPlan:
      title: Root Type for TrainingPlan
      description: ""
      required:
        - createdBy
        - description
        - id
        - type
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
        createdBy:
          type: integer
        description:
          type: string
      example:
        id: 1
        type: Calisthenics
        createdBy: 1
        description: This is a plan built for beginners
    RestUserPost:
      description: The user post returned to client app.
      required:
        - id
        - createdAt
        - userEmail
        - image
      type: object
      properties:
        id:
          description: ""
          type: integer
        caption:
          description: ""
          type: string
        createdAt:
          format: date-time
          description: ""
          type: string
        updatedAt:
          format: date-time
          description: ""
          type: string
        userEmail:
          description: ""
          type: string
        image:
          format: byte
          description: ""
          type: string
    PostComment:
      description: ""
      required:
        - postId
        - text
      type: object
      properties:
        postId:
          description: ""
          type: integer
        text:
          description: ""
          type: string
    RestPostComment:
      description: ""
      required:
        - id
        - text
        - userId
        - postId
        - createdAt
      type: object
      properties:
        id:
          description: ""
          type: integer
        text:
          description: ""
          type: string
        userEmail:
          description: ""
          type: string
        postId:
          description: ""
          type: integer
        createdAt:
          format: date-time
          description: ""
          type: string
    Like:
      description: ""
      required:
        - likedBy
        - postId
      type: object
      properties:
        id:
          description: ""
          type: integer
        likedBy:
          description: ""
          type: string
        postId:
          description: ""
          type: integer
    RestLike:
      description: ""
      required:
        - id
        - postId
        - userEmail
      type: object
      properties:
        id:
          description: ""
          type: integer
        userEmail:
          description: ""
          type: string
        postId:
          description: ""
          type: integer
    RestEvent:
      description: ""
      required:
        - id
        - eventName
        - eventDateTime
        - eventDuration
        - sportType
        - creator
        - participants
      type: object
      properties:
        id:
          description: ""
          type: integer
        eventName:
          description: ""
          type: string
        eventDetails:
          description: ""
          type: string
        eventDateTime:
          format: date-time
          description: ""
          type: string
        eventDuration:
          description: ""
          type: integer
        sportType:
          description: ""
          type: string
        userEmail:
          description: ""
          type: string
        latitude:
          format: double
          description: ""
          type: number
        longitude:
          format: double
          description: ""
          type: number
        participants:
          description: ""
          type: array
          items:
            $ref: '#/components/schemas/User'
tags:
  - name: User
    description: ""
  - name: Event
    description: ""
  - name: UserPost
    description: ""
  - name: TrainingPlan
    description: ""
  - name: RestUserPost
    description: ""
  - name: PostComment
    description: ""
  - name: RestPostComment
    description: ""
  - name: Like
    description: ""
  - name: RestLike
    description: ""
  - name: RestEvent
    description: ""